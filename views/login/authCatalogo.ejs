<%- include('authHome') %>
<style>
  label {color:black}
  .autocomplete {position:relative; display:inline-block; 
}
  input {border-radius:10px; background-color:#f1f1f1;
    padding:10px; font-size:14px;
}
  input[type=submit] {background-color:DodgerBlue;
    color:#fff; cursor:pointer;
}
  .autocomplete-items {
  position:absolute; border:1px solid #d4d4d4;
  border-bottom:none; border-top:none;
  z-index:99; top:100%; left:0; right:0;
}
  .autocomplete-items div {
    padding:10px; cursor:pointer; background-color:#fff; border-bottom:1px solid#d4d4d4; 
}
  .autocomplete-items div:hover {background-color:#e9e9e9; 
}
  .autocomplete-active {background-color:DodgerBlue !important; color:#ffffff; 
}
</style>

<div class="text-center">
  <div class="autocomplete">
    <i><input id="myInput" type="text" name="myProduct" placeholder="Cerca"></i>
    <input type="submit" id="subm">
  </div> 
  <div id="point_of_found_product" style="transition: all 0.5s; color:rgb(234, 239, 201); padding:10px;">
  </div>
  <h2 class="text-center" style="color:white">Lista occhiali</h2>
</div>
<div class="container">
  <div id="occhi"></div><!--div per generazione lista prodotti-->
</div>

<!-- Modal INDIRIZZO DI SPEDIZIONE  -->
<div id="myModal" class="modal fade" role="dialog">
  <!-- qui compare la form di bootstrap -->
</div>

<script type='text/javascript'> 
  function loadOcchiali() {
    const xhttp=new XMLHttpRequest()
    xhttp.open("GET","/eyes",false)
    xhttp.send(); 
    let occhiali=JSON.parse(xhttp.responseText) 
    console.log(occhiali)
    if (!occhiali){document.getElementById('occhi').innerHTML="<h1>Nessun prodotto presente in archivio"
                    return}
    for (let occhiale of occhiali){
        let x=`<div style="color:white">
                <h1>Nome: ${occhiale.nome}</h1>
                <h2>Gender: ${occhiale.gender}</h2>
                <h3>Materiale: ${occhiale.materiale}</h3>
                <h3>Prezzo: ${occhiale.prezzo}</h3>
                <button onClick="setBuy('${occhiale._id}')" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Buy</button>
            </div><hr>`              
        const tab=document.getElementById('occhi')
        tab.insertAdjacentHTML('beforeend',x)}}

  function setBuy(id){
    const idOcchiale=id
    let text=`
    <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Indirizzo di spedizione</h4>
      </div>
      <div class="modal-body">
        <form>
          <div class="col-md-6">
            <label  for="nome">Nome:</label>
            <input class="form-control" id="nome" type="text" name="nome" value="Leuro">
            <label  for="cognome">Cognome:</label>
            <input class="form-control" id="cognome" type="text" name="cognome" value="Borsini">
            <label  for="via">Via:</label>
            <input class="form-control" id="via" type="text" name="via" value="Russi 16">
            <label for="citta">citta:</label>
            <input class="form-control" id="citta" type="text" name="citta" value="Ancona">
            <label  for="cap">Cap:</label>
            <input class="form-control" id="cap" type="text" name="cap" value="60131">
            <br>
            <p style="cursor:pointer" onclick="confermaDati('${idOcchiale}')"><b>Avanti</b></p>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>`
    document.getElementById('myModal').innerHTML=text}
 
  function confermaDati(idOcchiale) {
    const nome=document.getElementById('nome').value
    const cognome=document.getElementById('cognome').value
    const via=document.getElementById('via').value
    const citta=document.getElementById('citta').value
    const cap=document.getElementById('cap').value
    let text=`
  <div class="modal-dialog">
    <div class="modal-content" style="background-color:#dbead5">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Conferma dei dati</h4>
      </div>
      <div class="modal-body">
        <form>
          <div class="col-md-6">
            <label  for="nome">Nome:</label>
            <input class="form-control" id="nome" type="text" name="nome" value="${nome}">
            <label  for="cognome">Cognome:</label>
            <input class="form-control" id="cognome" type="text" name="cognome" value="${cognome}">
            <label  for="via">Via:</label>
            <input class="form-control" id="via" type="text" name="via" value="${via}">
            <label for="citta">citta:</label>
            <input class="form-control" id="citta" type="text" name="citta" value="${citta}">
            <label  for="cap">Cap:</label>
            <input class="form-control" id="cap" type="text" name="cap" value="${cap}">
            <br>
            <p style="cursor:pointer" onclick="creaOrdine('${idOcchiale}')"><b>Conferma</b></p>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" onclick="setBuy('${idOcchiale}')">Indietro</button>
      </div>
    </div>
  </div>`
    document.getElementById('myModal').innerHTML=text}

  function creaOrdine(idOcchiale) {
    fetch(`/eyes/${idOcchiale}`,{method:'GET',header:{'Content-Type':'application/json'}})
    .then(response=>response.json())
    .then(occhiale=>{
    const nome=document.getElementById('nome').value
    const cognome=document.getElementById('cognome').value
    const via=document.getElementById('via').value
    const citta=document.getElementById('citta').value
    const cap=document.getElementById('cap').value
    let text=`
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h2 class="modal-title">Riassunto dei dati</h2>
      </div>
      <div class="modal-body">
        <form action="/order" method="POST">
          <div class="col-md-6">     
            <label  for="nome">Nome:</label>
            <input class="form-control" id="nome" type="text" name="nome" value="${nome}">
            <label  for="cognome">Cognome:</label>
            <input class="form-control" id="cognome" type="text" name="cognome" value="${cognome}">
            <label  for="via">Via:</label>
            <input class="form-control" id="via" type="text" name="via" value="${via}">
            <label for="citta">citta:</label>
            <input class="form-control" id="citta" type="text" name="citta" value="${citta}">
            <label  for="cap">Cap:</label>
            <input class="form-control" id="cap" type="text" name="cap" value="${cap}">
            <h4>Nome occhiale: ${occhiale.nome}</h4>
            <h4>Gender: ${occhiale.gender}</h4>
            <h4>Materiale: ${occhiale.materiale}</h4><hr>
            <h4 style="color:red">Prezzo: ${occhiale.prezzo} €</h4>
            <input type="hidden" name="idOcchiale" value="${idOcchiale}">
            <input type="hidden" name="idCliente" value="${idCliente}">
            <br>
            <button type="submit"><b>Vai al pagamento</b></button>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" onclick="setBuy('${idOcchiale}')">Indietro</button>
      </div>
    </div>
  </div>`
    document.getElementById('myModal').innerHTML=text})}
  loadOcchiali()

  function autocomplete(inp, arr) {
  /*autocomplete accetta due argomenti: l'elemento del campo di testo e una serie di possibili valori completati automaticamente*/
  let currentFocus
  /*esegui una funzione quando viene scritto nell'input*/
  inp.addEventListener("input", function(e) {
      let a, b, i, val = this.value
      /*chiudere eventuali elenchi gia aperti*/
      closeAllLists()
      if (!val) {return false}
      currentFocus = -1
      /*creare un elemento DIV che conterrà gli elementi (valori)*/
      a = document.createElement("DIV")
      a.setAttribute("id", this.id + "autocomplete-list")
      a.setAttribute("class", "autocomplete-items")
      /*aggiungi l'elemento DIV come figlio del contenitore di completamento automatico*/
      this.parentNode.appendChild(a)
      for (i = 0; i < arr.length; i++) {
        /*controlla se l'elemento inizia con le stesse lettere del valore del campo di testo*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*creare un elemento DIV per ogni elemento corrispondente*/
          b = document.createElement("DIV")
          /*rendi in grassetto la prima lettera delle parole dell'elenco*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>"
          b.innerHTML += arr[i].substr(val.length)/*stampa il resto della parola*/
          /*inserisci un campo di input che conterrà il valore dell'elemento dell'array corrente*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>"
          /*eseguire una funzione quando qualcuno fa clic sul valore dell'articolo (elemento DIV)*/
          b.addEventListener("click", function(e) {
              /*inserisci il valore per il campo di testo di completamento automatico*/
              inp.value = this.getElementsByTagName("input")[0].value; let fgh=inp.value    
              // submit sull'elemento cliccato
              document.getElementById('subm').addEventListener('click',()=>{setValue(fgh)})
              function setValue(data) {
                fetch ('/eyes',{method:'GET',headers:{'Content-Type':'application/Json'}})
                .then ((response)=>response.json())
                .then ((res)=>{
                  res.forEach(element => {
                    if (element.nome==data) {
                      const price=element.prezzo; const material=element.materiale; const id=element._id
                      const ert = document.getElementById('point_of_found_product')
                      ert.style.fontSize="20px"
                      ert.innerHTML = `${data} ${material} ${price} € <button style="background-color:grey"
                       onclick="setBuy('${id}')" data-toggle="modal" data-target="#myModal">Acquista</button>`;  return
                      }
                  }) 
                })}
              /*chiudi qualsiasi altro elenco aperto di valori completati automaticamente*/
              closeAllLists()
          })
          a.appendChild(b)
        }
      }
  })
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener ("keydown", function(e) {
      let x = document.getElementById(this.id + "autocomplete-list")
      if (x) x = x.getElementsByTagName("div")
      if (e.keyCode == 40) {
        /*Se viene premuto il tasto freccia GIÙ,aumentare la variabile currentFocus*/
        currentFocus++
        /*rendono l'elemento corrente più visibile*/
        addActive(x)
      } else if (e.keyCode == 38) { 
        /*Se viene premuto il tasto freccia SU,diminuire la variabile currentFocus*/
        currentFocus--
        /*rendono l'elemento corrente più visibile*/
        addActive(x)
      } else if (e.keyCode == 13) {
        /*Se viene premuto il tasto INVIO, impedisce l'invio del modulo*/
        e.preventDefault()
        if (currentFocus > -1) {
          /*e simulare un clic sulla voce "attiva"*/
          if (x) x[currentFocus].click()
        }
      }
  })
  function addActive(x) {
    /*una funzione per classificare un elemento come "attivo"*/
    if (!x) return false
    /*inizia rimuovendo la classe "attiva" su tutti gli elementi*/
    removeActive(x)
    if (currentFocus >= x.length) currentFocus = 0
    if (currentFocus < 0) currentFocus = (x.length - 1)
    x[currentFocus].classList.add("autocomplete-active")/*add class "autocomplete-active":*/
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (let i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active")
    }
  }
  function closeAllLists(elmnt) {
    /*chiudi tutti gli elenchi di completamento automatico nel documento,
    tranne quello passato come argomento*/
    let x = document.getElementsByClassName("autocomplete-items")
    for (let i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i])
      }
    }
  }
  /*execute a function when someone clicks in the body*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target)
  })
  }
  fetch ('/eyes',{method:'GET',headers:{'Content-Type':'application/Json'}})
    .then ((response)=>response.json())
    .then ((data)=>{ const product = []
      data.forEach(element => {
        product.push(element.nome)
      })
      autocomplete(document.getElementById("myInput"), product)})
  .catch((error)=>{console.error('Errore:',error)
  })

  // GET COOKIE E SEND COOKIE
  let x=document.cookie; let data=[] 
  let xy=x.split(';')
  for (let d=0; xy.length>d; d++ ) {
    let i=0; let xyz=xy[d].trim();  
    while (xyz.length>i) {
      if (xyz[i]=='=') {data.push(xyz.substring(i+1))}
      i++}}
  const idCliente=data[0]
  const scadenza = new Date(Date.now() +1800000).toUTCString()//data di oggi piu mezzo secondo
  document.cookie = `id=${idCliente}; expires=${scadenza}`
  
</script>
</body>
</html>